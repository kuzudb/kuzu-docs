---
---

<starlight-theme-select>
	<button class="theme-toggle" aria-label={Astro.locals.t('themeSelect.accessibleLabel')} title={Astro.locals.t('themeSelect.accessibleLabel')}>
		<div class="toggle-track">
			<svg class="toggle-icon sun-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<circle cx="12" cy="12" r="5"/>
				<line x1="12" y1="1" x2="12" y2="3"/>
				<line x1="12" y1="21" x2="12" y2="23"/>
				<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
				<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
				<line x1="1" y1="12" x2="3" y2="12"/>
				<line x1="21" y1="12" x2="23" y2="12"/>
				<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
				<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
			</svg>
			<svg class="toggle-icon moon-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
			</svg>
			<div class="toggle-thumb"></div>
		</div>
	</button>
</starlight-theme-select>

<style>
	.theme-toggle {
		background: none;
		border: none;
		cursor: pointer;
		padding: 0.25rem;
		border-radius: 0.5rem;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: background-color 0.2s ease;
	}

	.theme-toggle:hover {
		background-color: var(--sl-color-gray-5);
	}

	.toggle-track {
		width: 3.5rem;
		height: 1.75rem;
		background-color: var(--sl-color-gray-5);
		border-radius: 1rem;
		position: relative;
		transition: background-color 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 0 0.25rem;
	}

	:global([data-theme='light']) .toggle-track {
		background-color: var(--sl-color-gray-6);
	}

	.toggle-icon {
		position: absolute;
		z-index: 1;
		transition: opacity 0.3s ease;
	}

	.sun-icon {
		left: 0.5rem;
		color: var(--sl-color-white);
		opacity: 0;
	}

	.moon-icon {
		right: 0.5rem;
		color: white;
		opacity: 1;
	}

	:global([data-theme='light']) .sun-icon {
		opacity: 1;
		color: var(--sl-color-white);
	}

	:global([data-theme='light']) .moon-icon {
		opacity: 0;
	}

	.toggle-thumb {
		width: 1.25rem;
		height: 1.25rem;
		background: linear-gradient(135deg, var(--sl-color-accent) 0%, #e0743e 100%);
		border-radius: 50%;
		position: absolute;
		top: 0.25rem;
		left: 0.25rem;
		transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
		z-index: 2;
	}

	:global([data-theme='light']) .toggle-thumb {
		transform: translateX(1.75rem);
		background: linear-gradient(135deg, var(--sl-color-accent) 0%, #e0743e 100%);
	}
</style>

<script>
	type Theme = 'dark' | 'light';

	/** Key in `localStorage` to store color theme preference at. */
	const storageKey = 'starlight-theme';

	/** Load the user's preference from `localStorage`. */
	const loadTheme = (): Theme => {
		const stored = typeof localStorage !== 'undefined' && localStorage.getItem(storageKey);
		if (stored === 'light' || stored === 'dark') {
			return stored;
		}
		// Default to system preference, with light as fallback
		if (typeof window !== 'undefined' && window.matchMedia) {
			return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
		}
		return 'light';
	};

	/** Store the user's preference in `localStorage`. */
	function storeTheme(theme: Theme): void {
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem(storageKey, theme);
		}
	}

	/** Update document theme and local storage state. */
	function onThemeChange(theme: Theme): void {
		document.documentElement.dataset.theme = theme;
		storeTheme(theme);
	}

	class StarlightThemeSelect extends HTMLElement {
		constructor() {
			super();
			const currentTheme = loadTheme();
			onThemeChange(currentTheme);
			
			const toggle = this.querySelector('.theme-toggle');
			toggle?.addEventListener('click', () => {
				const currentTheme = loadTheme();
				const newTheme: Theme = currentTheme === 'light' ? 'dark' : 'light';
				onThemeChange(newTheme);
			});
		}
	}
	customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>

